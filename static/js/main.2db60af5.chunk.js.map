{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Square","value","this","props","icon","className","type","onClick","React","Component","Board","state","squares","Array","fill","xNext","winner","board","i","row","j","push","handleClick","slice","setState","Math","floor","col","count","k","console","log","inital_pos","inital_pos_anti","original","status","createBoard","background-color","handleClickReset","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2db60af5.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport { Button } from 'antd/lib';\nimport { FaTimes } from \"react-icons/fa\";\nimport {\n  FaRegCircle\n\n} from \"react-icons/fa\";\n\n\nclass Square extends React.Component {\n  render() {\n    const value = this.props.value;\n    var icon = null;\n    if (value) {\n      icon = value === \"X\" ? <FaTimes className=\"cross\" /> : <FaRegCircle className=\"nought\" />;\n    }\n    return (\n      <Button className=\"square\" type=\"default\" onClick={() => this.props.onClick()}>\n        {icon}\n      </Button>\n    );\n  };\n}\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(400).fill(null),\n      xNext: true,\n      winner: null,\n    };\n  }\n\n  createBoard() {\n    let board = []\n    for (let i = 0; i < 20; i++) {\n      let row = []\n      for (let j = 0; j < 20; j++) {\n        row.push(<Square value={this.state.squares[20 * i + j]} onClick={() => this.handleClick(20 * i + j)} />)\n      }\n      board.push(<div className=\"board-row\">{row}</div>);\n    }\n    return board;\n  }\n\n  handleClick(i) {\n    const squares = this.state.squares.slice(); // create a copy of this.state.squares\n    if (squares[i] !== null || this.state.winner !== null)\n      return;\n    squares[i] = this.state.xNext ? 'X' : 'O';\n    this.setState({ squares: squares, xNext: !this.state.xNext }); // pass the replicant squares array into the original squares array\n\n    let row = Math.floor(i / 20);\n    let col = i % 20;\n    let count = 0;\n\n    // check row\n    for (let k = 0; k < 20; k++) {\n      if (squares[row * 20 + k] !== squares[i]) {\n        count = 0;\n      }\n      else count++;\n\n      if (count === 5) {\n        this.setState({ winner: squares[i] });\n        console.log(\"Winner \" + squares[i]);\n      }\n    }\n\n    // check col\n    for (let k = 0; k < 20; k++) {\n      if (squares[k * 20 + col] !== squares[i]) {\n        count = 0;\n      }\n      else count++;\n      if (count === 5) {\n        this.setState({ winner: squares[i] });\n        console.log(\"Winner \" + squares[i]);\n      }\n    }\n    // check diagonal\n    let inital_pos = i % 21;\n    for (let k = 0; k < 20; k++) {\n      if (squares[inital_pos + 21 * k] !== squares[i]) {\n        count = 0;\n      }\n      else count++;\n      if (count === 5) {\n        this.setState({ winner: squares[i] });\n        console.log(\"Winner \" + squares[i]);\n      }\n    }\n    // check anti-diagonal\n    let inital_pos_anti = i % 21 + 2 * row;\n    console.log(i);\n    console.log(inital_pos_anti);\n    for (let k = 0; k < 20; k++) {\n      if (squares[inital_pos_anti + 19 * k] !== squares[i]) {\n        count = 0;\n      }\n      else count++;\n      if (count === 5) {\n        this.setState({ winner: squares[i] });\n        console.log(\"Winner \" + squares[i]);\n      }\n    }\n  }\n  handleClickReset() {\n    const original = Array(400).fill(null);\n    this.setState({ squares: original, winner: null, xNext: true });\n  }\n  render() {\n    let status;\n    if (this.state.winner) {\n      status = 'Winner: ' + this.state.winner;\n    } else {\n      status = 'Next player: ' + (this.state.xNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"container\">\n        <div className=\"status\">{status}</div>\n        <div className=\"game\">\n          <div className=\"game-board\">\n            {this.createBoard()}\n          </div>\n        </div>\n        <div className=\"button-reset\"><Button type=\"primary\" background-color=\"#0da192\" onClick={() => this.handleClickReset()}>RESET THE GAME</Button></div>\n      </div>\n\n    )\n  }\n}\n\nexport default Board;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Game from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Game />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}